import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { checkRelationAssertion, DataObject, rawDataSymbol, rtfm } from '@twurple/common';
/**
 * An EventSub event representing a warning sent to a user.
 */
let EventSubChannelWarningSendEvent = class EventSubChannelWarningSendEvent extends DataObject {
    /** @internal */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId() {
        return this[rawDataSymbol].broadcaster_user_id;
    }
    /**
     * The name of the broadcaster.
     */
    get broadcasterName() {
        return this[rawDataSymbol].broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName() {
        return this[rawDataSymbol].broadcaster_user_name;
    }
    /**
     * Gets more information about the broadcaster.
     */
    async getBroadcaster() {
        return checkRelationAssertion(await this._client.users.getUserById(this[rawDataSymbol].broadcaster_user_id));
    }
    /**
     * The ID of the moderator who sent the warning.
     */
    get moderatorId() {
        return this[rawDataSymbol].moderator_user_id;
    }
    /**
     * The name of the moderator who sent the warning.
     */
    get moderatorName() {
        return this[rawDataSymbol].moderator_user_login;
    }
    /**
     * The display name of the moderator who sent the warning.
     */
    get moderatorDisplayName() {
        return this[rawDataSymbol].moderator_user_name;
    }
    /**
     * Gets more information about the moderator.
     */
    async getModerator() {
        return checkRelationAssertion(await this._client.users.getUserById(this[rawDataSymbol].moderator_user_id));
    }
    /**
     * The ID of the user being warned.
     */
    get userId() {
        return this[rawDataSymbol].user_id;
    }
    /**
     * The name of the user being warned.
     */
    get userName() {
        return this[rawDataSymbol].user_login;
    }
    /**
     * The display name of the user being warned.
     */
    get userDisplayName() {
        return this[rawDataSymbol].user_name;
    }
    /**
     * Gets more information about the user.
     */
    async getUser() {
        return checkRelationAssertion(await this._client.users.getUserById(this[rawDataSymbol].user_id));
    }
    /**
     * The reason given for the warning, or `null` if no reason is specified.
     */
    get reason() {
        return this[rawDataSymbol].reason;
    }
    /**
     * The chat rules cited for the warning. This ts an empty array if no rules are cited.
     */
    get chatRulesCited() {
        var _a;
        return (_a = this[rawDataSymbol].chat_rules_cited) !== null && _a !== void 0 ? _a : [];
    }
};
__decorate([
    Enumerable(false)
], EventSubChannelWarningSendEvent.prototype, "_client", void 0);
EventSubChannelWarningSendEvent = __decorate([
    rtfm('eventsub-base', 'EventSubChannelWarningSendEvent', 'userId')
], EventSubChannelWarningSendEvent);
export { EventSubChannelWarningSendEvent };
