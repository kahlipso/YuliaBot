import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { checkRelationAssertion, DataObject, rawDataSymbol, rtfm } from '@twurple/common';
/**
 * An EventSub event representing a user's notification about the resolution of their held chat message by AutoMod.
 */
let EventSubChannelChatUserMessageUpdateEvent = class EventSubChannelChatUserMessageUpdateEvent extends DataObject {
    /** @internal */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The ID of the broadcaster in whose chat the held message was resolved.
     */
    get broadcasterId() {
        return this[rawDataSymbol].broadcaster_user_id;
    }
    /**
     * The name of the broadcaster in whose chat the held message was resolved.
     */
    get broadcasterName() {
        return this[rawDataSymbol].broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster in whose chat the held message was resolved.
     */
    get broadcasterDisplayName() {
        return this[rawDataSymbol].broadcaster_user_name;
    }
    /**
     * Gets more information about the broadcaster.
     */
    async getBroadcaster() {
        return checkRelationAssertion(await this._client.users.getUserById(this[rawDataSymbol].broadcaster_user_id));
    }
    /**
     * The ID of the user whose message is being held by AutoMod.
     */
    get userId() {
        return this[rawDataSymbol].user_id;
    }
    /**
     * The name of the user whose message is being held by AutoMod.
     */
    get userName() {
        return this[rawDataSymbol].user_login;
    }
    /**
     * The display name of the user whose message is being held by AutoMod.
     */
    get userDisplayName() {
        return this[rawDataSymbol].user_name;
    }
    /**
     * Gets more information about the user.
     */
    async getUser() {
        return checkRelationAssertion(await this._client.users.getUserById(this[rawDataSymbol].user_id));
    }
    /**
     * The ID of the message held by AutoMod.
     */
    get messageId() {
        return this[rawDataSymbol].message_id;
    }
    /**
     * The plain text of the message.
     */
    get messageText() {
        return this[rawDataSymbol].message.text;
    }
    /**
     * The pre-parsed message parts.
     */
    get messageParts() {
        return this[rawDataSymbol].message.fragments;
    }
    /**
     * The status of the resolved message.
     */
    get status() {
        return this[rawDataSymbol].status;
    }
};
__decorate([
    Enumerable(false)
], EventSubChannelChatUserMessageUpdateEvent.prototype, "_client", void 0);
EventSubChannelChatUserMessageUpdateEvent = __decorate([
    rtfm('eventsub-base', 'EventSubChannelChatUserMessageUpdateEvent', 'messageId')
], EventSubChannelChatUserMessageUpdateEvent);
export { EventSubChannelChatUserMessageUpdateEvent };
